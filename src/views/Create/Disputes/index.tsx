import Box from "@/components/Box";
import Card from "@/components/Card";
import Text from "@/components/Text";
import { theme } from "@/styles/theme";
import { Button } from "@/components/Buttons";
import { TDisputeProps } from "../types";
import { useDocument } from "@/context/Document";
import ValueInObject from "../utils/ValueInObject";
import Loading from "@/components/Buttons/icons/Loading";
import SwitchTemplate from "../utils/SwitchType";
import { useRouter } from "next/router";

const Disputes = ({ disputes, loading }: TDisputeProps) => {
  const { object, errors } = useDocument();

  const router = useRouter();

  const generateNewTemplate = (index: number, _id: string, type: string) => {
    return SwitchTemplate(index, type, _id);
  };

  return (
    <Box
      wid="100%"
      flexDirection="column"
      justifyContent="flex-start"
      alignItems="flex-start"
      marginTop={20}
    >
      <Text
        fontSize={theme.fonts.sizes.md}
        color={theme.colors.base.secondary}
        weight={500}
      >
        Disputes
      </Text>
      <Text
        fontSize={theme.fonts.sizes.sm}
        color={theme.colors.base.gray[300]}
        marginBottom={15}
      >
        List of disputes generated by the user
      </Text>
      {(disputes && disputes?.length === 0) || !disputes ? (
        <Card>
          <Text
            fontSize={theme.fonts.sizes.sm}
            color={theme.colors.base.red[200]}
          >
            Select a dispute option from the side menu
          </Text>
        </Card>
      ) : (
        disputes &&
        disputes.length > 0 &&
        disputes.map((dispute, index) => {
          return (
            <Card key={dispute.id || dispute?._id}>
              {dispute.template ||
                generateNewTemplate(index, dispute?._id, dispute.type)}
            </Card>
          );
        })
      )}
      {disputes && disputes.length > 0 && (
        <Box wid="100%" justifyContent="flex-end">
          {ValueInObject(errors) && (
            <Text
              fontSize={theme.fonts.sizes.sm}
              color={theme.colors.base.red[200]}
              weight={600}
              marginRight={10}
            >
              Something went wrong, check the form and try again
            </Text>
          )}

          <Button
            wid={["100%", "100%", "50%", "25%"]}
            justifyContent="center"
            backgroundColor={theme.colors.base.secondary}
            fontSize={theme.fonts.sizes.md}
            fontColor={theme.colors.base.white}
            type="submit"
            icon={
              loading && (
                <Loading
                  size={theme.icons.sizes.xs}
                  color={theme.colors.base.white}
                />
              )
            }
            marginTop={10}
            marginBottom={5}
          >
            <Text
              fontSize={theme.fonts.sizes.md}
              color={theme.colors.base.white}
              weight={500}
              pointerEvents="none"
            >
              {!loading &&
              object?._id &&
              router.pathname.indexOf(`/update`) >= 0
                ? "Update letter"
                : "Create Letter"}
            </Text>
          </Button>
        </Box>
      )}
    </Box>
  );
};

export default Disputes;
